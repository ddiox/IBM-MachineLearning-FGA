# -*- coding: utf-8 -*-
"""Bike Sharing Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sa06n8msymYcuaXZlP0_EUtOgKjpqYGZ

Submission 2 Membuat Model Machine Learning dengan Data Time Series

Bike Sharing Time Series

Read Data
"""

import pandas as pd

!wget --no-check-certificate \
  https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip \
  -O /tmp/Bike-Sharing-Dataset.zip

import zipfile,os

local_zip = '/tmp/Bike-Sharing-Dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

os.listdir('/tmp')

df_hour = pd.read_csv('/tmp/hour.csv', index_col='dteday')
df_hour.head()

"""Data Preprocessing"""

# check null values
df_hour.isnull().sum()

# convert type into numpy array
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)

df_hour.head()

df_hour = df_hour.drop(['instant', 'atemp', 'weekday', 'casual', 'registered'], axis=1)
df_hour

train_dataset = df_hour.sample(frac=0.8,random_state=0).astype(float)
test_dataset = df_hour.astype(float)

train_labels = train_dataset.pop('cnt').astype(float).values
test_labels = test_dataset.pop('cnt').astype(float).values

train_dataset = train_dataset.values[:, np.newaxis]
train_dataset.ndim

df_hour.head()



"""Building Model"""

from keras.layers import Dense, LSTM
import tensorflow as tf

train_set = windowed_dataset(train_labels, window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=['mae'])

history = model.fit(
    train_dataset,
    train_labels, 
    epochs=100, 
    batch_size=64, 
    validation_split=0.2,
    shuffle=False,
)

import matplotlib.pyplot as plt

plt.figure(figsize=(20,8))
plt.plot(df_hour)
plt.title('Bike Sharing')
plt.xlabel('dteday')
plt.ylabel('cnt')
plt.show()

#y max
max = df_hour['cnt'].max()
print('Max value : ' )
print(max)

#y min
min = df_hour['cnt'].min()
print('Max value : ' )
print(min)

# model < 10% scaled data
x = (977 - 1) * (10 / 100)
print(x)

"""
    Atttributes: 
    
    instant: record index
    dteday : date
    season : season (1:winter, 2:spring, 3:summer, 4:fall)
    yr : year (0: 2011, 1:2012)
    mnth : month ( 1 to 12)
    hr : hour (0 to 23)
    holiday : weather day is holiday or not (extracted from [Web Link])
    weekday : day of the week
    workingday : if day is neither weekend nor holiday is 1, otherwise is 0.
    weathersit :
    1: Clear, Few clouds, Partly cloudy, Partly cloudy
    2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist
    3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds
    4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
    temp : Normalized temperature in Celsius. The values are derived via (t-t_min)/(t_max-t_min), t_min=-8, t_max=+39 (only in hourly scale)
    atemp: Normalized feeling temperature in Celsius. The values are derived via (t-t_min)/(t_max-t_min), t_min=-16, t_max=+50 (only in hourly scale)
    hum: Normalized humidity. The values are divided to 100 (max)
    windspeed: Normalized wind speed. The values are divided to 67 (max)
    casual: count of casual users
    registered: count of registered users
    cnt: count of total rental bikes including both casual and registered
"""