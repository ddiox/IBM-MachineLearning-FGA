# -*- coding: utf-8 -*-
"""Image Classification  TF-Lite.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p-O8bVp8AbXaOIUQ4_TwAf7byQmnc34P

Sumission 3 Image Classification Model Deployment

Image Classification TF-Lite

Import Library
"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

"""Read Data"""

!wget --no-check-certificate https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
-O /tmp/rockpaperscissors.zip

import zipfile,os

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

os.listdir('/tmp')

pip install split-folders

pip install split-folders tqdm

import splitfolders

splitfolders.ratio('/tmp/rockpaperscissors/rps-cv-images', output="/tmp/rockpaperscissors/output_split", seed=1337, ratio=(.8, .2))
base_dir = '/tmp/rockpaperscissors/output_split'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

os.listdir('/tmp/rockpaperscissors/output_split/train')

os.listdir('/tmp/rockpaperscissors/output_split/val')

# create rock directory in training data directory
train_rock_dir = os.path.join(train_dir, 'rock')
     
# create scissors directory in training data directory
train_scissors_dir = os.path.join(train_dir, 'scissors')

# create paper directoryr in training data directory
train_paper_dir = os.path.join(train_dir, 'paper')
     
# create rock directory in validation data directory
validation_rock_dir = os.path.join(validation_dir, 'rock')
     
# create scissors directory in validation data directory
validation_scissors_dir = os.path.join(validation_dir, 'scissors')

# create paper directory in validation data directory
validation_paper_dir = os.path.join(validation_dir, 'paper')

"""Data Preprocessing"""

train_datagen = ImageDataGenerator(
                rescale=1./255,
                rotation_range=20,
                horizontal_flip=True,
                shear_range = 0.2,
                fill_mode = 'nearest')
     
test_datagen = ImageDataGenerator(
               rescale=1./255,
               rotation_range=20,
               horizontal_flip=True,
               shear_range = 0.2,
               fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
            train_dir,  
            target_size=(150, 150),  
            batch_size=4,
            class_mode='categorical')
     
validation_generator = test_datagen.flow_from_directory(
            validation_dir,
            target_size=(150, 150), 
            batch_size=4, 
            class_mode='categorical')

"""Building Model"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(8, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95 and logs.get('val_accuracy')>0.95):
      print("\nAccuracy above 95%, finish training!")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(
            train_generator,
            steps_per_epoch=25,  
            epochs=20,
            validation_data=validation_generator, 
            validation_steps=5, 
            callbacks = [callbacks], 
            verbose=2)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""TF-Lite"""

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

# Commented out IPython magic to ensure Python compatibility.
model.save('my_model.pb') 
# %cd